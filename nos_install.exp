#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sat Jan 15 11:49:50 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./dtcyber
set dtcyber $spawn_id
match_max 100000
expect "Operator> "
spawn tail -F LP5xx_C07_E7
set printer $spawn_id
set spawn_id $dtcyber
send -- "e o!\r"
expect -exact "e o!\r
\r
Operator> "
send -- "e p!\r"
expect -exact "e p!\r
\r
Operator> "
send -- "e i=0\r"
expect -exact "e i=0\r
\r
Operator> "
send -- "e d=yes\r"
expect -exact "e d=yes\r
\r
Operator> "
send -- "e\r"
expect -exact "e\r
\r
Operator> "
send -- "e next.\r"
expect -exact "e next.\r
\r
Operator> "
send -- "e \]\]\]!\r"
expect -exact "e \]\]\]!\r
\r
Operator> "
send -- "e initialize,al,5,6,10,11,12,13,14,15,16,17,20,21,22,23,24,25."
expect -exact "initialize,al,5,6,10,11,12,13,14,15,16,17,20,21,22,23,24,25."
send -- "\r"
expect -exact "\r
\r
Operator> "
send -- "e initialize,al,26."
expect -exact "e initialize,al,26."
send -- "\r"
expect -exact "\r
\r
Operator> "
send -- "e go.\r"
expect -exact "e go.\r
\r
Operator> "
send -- "e #1000#%year%%mon%%day%;%hour%%min%%sec%"
expect -exact "e #1000#%year%%mon%%day%;%hour%%min%%sec%"
send -- "\r"
expect -exact "\r
\r
Operator> "
send -- "lt 13,0,1,r,nos287-1.tap\r"
expect -exact "lt 13,0,1,r,nos287-1.tap\r
Successfully loaded nos287-1.tap\r
\r
Operator> "
send -- "lt 13,0,2,r,nos287-2.tap\r"
expect -exact "lt 13,0,2,r,nos287-2.tap\r
Successfully loaded nos287-2.tap\r
\r
Operator> "
send -- "lt 13,0,3,r,nos287-3.tap\r"
expect -exact "lt 13,0,3,r,nos287-3.tap\r
Successfully loaded nos287-3.tap\r
\r
Operator> "
expect -i $printer "QUEUE FILE UTILITY COMPLETE"
send_user "\rDeadstart complete now launching sysgen(full)\r\r"
send -- "e x.sysgen(full)\r"
expect "Operator>"
expect -i $printer "E N D   F U L L"
send_user "\r Full sysgen complete now launching sysgen(source)\r\r"
send -- "e xsysgen(source)\r"
expect "Operator>"
expect -i $printer "E N D   S O U R C E"
send_user "\r\rSysgen Complete\r\r"
send -- "lc 11,7,network-batch-DEEP13.txt\r"
expect "Operator>"
expect -i $printer ".REVERT. *** END OF NDLJOB ***"
send -- "e x.dis.\r"
expect "Operator>"
sleep 1
send -- "e user(install,install)\r"
expect "Operator>"
send -- "e settl(*)\r"
expect "Operator>"
send -- "setjsl(*)\r"
expect "Operator>"
send -- "e ,_load,fn=opl871,un=ns2871\r"
expect "Operator>"
sleep 1
send -- "e load,fn=nam5871,un=ns2871\r"
expect "Operator>"
sleep 1
send -- "e ^^dis.\r"
expect "Operator>"
send -- "e els.reclaim.\r"
expect "Operator>"
send -- "e change,opl871/ct=pu,ac=y.\r"
expect "Operator>"
send -- {e [drop.}
send -- "\r"
expect "Operator>"
expect -i $printer "OPL871  D 99/12/09  99/12/09   87369   NS2871    BC004P   1  51"
expect -i $printer "NAM5871 D 97/11/05  99/12/09   22314   NS2871    BC004P   1  57"
expect -i $printer "RECLAIM COMPLETE."
expect -i $printer "CHANGE,OPL871/CT=PU,AC=Y."
send -- "rp 7,7\r"
expect -exact "rp 7,7\r
Paper removed from 5xx printer\r
\r
Operator> "
send -- "e che\r"
expect -exact "e che\r
\r
Operator> "
send -- "e ab.\r"
expect -exact "e ab.\r
\r
Operator> "
send -- "e che!\r"
expect -exact "e che!\r
\r
Operator> "
send -- "e \[\r"
expect -exact "e \[\r
\r
Operator> "
send -- "e \[unlock.\r"
expect -exact "e \[unlock.\r
\r
Operator> "
send -- "e che\r"
expect -exact "e che\r
\r
Operator> "
sleep 3
send -- "e step.\r"
expect -exact "e step.\r
\r
Operator> "
send -- "shutdown\r"
expect eof
